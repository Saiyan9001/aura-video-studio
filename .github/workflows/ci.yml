name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_FILE: Aura.sln

jobs:
  # CI Guard: Fail if MSIX/EXE packaging files are detected
  portable-only-guard:
    name: Portable-Only Policy Guard
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for MSIX/EXE packaging files
      run: |
        echo "Checking for prohibited MSIX/EXE packaging files..."
        
        FOUND_VIOLATIONS=0
        
        # Check for .iss files (Inno Setup)
        if find . -name "*.iss" -not -path "./.git/*" | grep -q .; then
          echo "❌ ERROR: Found Inno Setup (.iss) files:"
          find . -name "*.iss" -not -path "./.git/*"
          FOUND_VIOLATIONS=1
        fi
        
        # Check for Package.appxmanifest
        if find . -name "Package.appxmanifest" -not -path "./.git/*" | grep -q .; then
          echo "❌ ERROR: Found Package.appxmanifest files:"
          find . -name "Package.appxmanifest" -not -path "./.git/*"
          FOUND_VIOLATIONS=1
        fi
        
        # Check for .msix/.msixbundle/.appx files
        if find . \( -name "*.msix" -o -name "*.msixbundle" -o -name "*.appx*" \) -not -path "./.git/*" | grep -q .; then
          echo "❌ ERROR: Found MSIX/APPX artifact files:"
          find . \( -name "*.msix" -o -name "*.msixbundle" -o -name "*.appx*" \) -not -path "./.git/*"
          FOUND_VIOLATIONS=1
        fi
        
        # Check for MSIX-related keywords in packaging scripts
        if find scripts/packaging -type f \( -name "*.ps1" -o -name "*.sh" \) -exec grep -l "msix\|MSIX\|AppxBundle\|msbuild.*Aura.App" {} \; 2>/dev/null | grep -q .; then
          echo "❌ ERROR: Found MSIX references in packaging scripts:"
          find scripts/packaging -type f \( -name "*.ps1" -o -name "*.sh" \) -exec grep -l "msix\|MSIX\|AppxBundle\|msbuild.*Aura.App" {} \;
          FOUND_VIOLATIONS=1
        fi
        
        # Check for setup/installer keywords in script names
        if find scripts/packaging -type f \( -name "*msix*" -o -name "*inno*" -o -name "*setup*.iss" -o -name "*installer*" \) | grep -q .; then
          echo "❌ ERROR: Found MSIX/installer related script files:"
          find scripts/packaging -type f \( -name "*msix*" -o -name "*inno*" -o -name "*setup*.iss" -o -name "*installer*" \)
          FOUND_VIOLATIONS=1
        fi
        
        # Check for MSIX build workflows (look for actual build commands, not just checks)
        MSIX_BUILD_PATTERN="msbuild.*Aura\.App.*Release\|UapAppxPackageBuildMode=\|AppxBundle=\|upload.*msix-package"
        if grep -r "$MSIX_BUILD_PATTERN" .github/workflows/ 2>/dev/null | grep -v "MSIX_BUILD_PATTERN" | grep -q .; then
          echo "❌ ERROR: Found MSIX build commands in GitHub workflows:"
          grep -r "$MSIX_BUILD_PATTERN" .github/workflows/ | grep -v "MSIX_BUILD_PATTERN"
          FOUND_VIOLATIONS=1
        fi
        
        if [ $FOUND_VIOLATIONS -eq 1 ]; then
          echo ""
          echo "=========================================="
          echo "PORTABLE-ONLY POLICY VIOLATION DETECTED"
          echo "=========================================="
          echo ""
          echo "This repository has adopted a portable-only distribution policy."
          echo "MSIX packages and EXE installers are no longer supported."
          echo ""
          echo "Please remove the flagged files and references."
          echo "Run: ./scripts/cleanup/portable_only_cleanup.sh"
          echo ""
          exit 1
        fi
        
        echo "✅ No MSIX/EXE packaging files detected. Portable-only policy is enforced."

  build-and-test:
    name: Build and Test
    runs-on: windows-latest
    needs: portable-only-guard
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
      
    - name: Build Aura.Core
      run: dotnet build Aura.Core/Aura.Core.csproj --configuration Release --no-restore
      
    - name: Build Aura.Providers
      run: dotnet build Aura.Providers/Aura.Providers.csproj --configuration Release --no-restore
      
    - name: Build Aura.Tests
      run: dotnet build Aura.Tests/Aura.Tests.csproj --configuration Release --no-restore
      
    - name: Build Aura.E2E
      run: dotnet build Aura.E2E/Aura.E2E.csproj --configuration Release --no-restore
      
    - name: Run Unit Tests
      run: dotnet test Aura.Tests/Aura.Tests.csproj --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=unit-tests.trx"
      
    - name: Run E2E Tests
      run: dotnet test Aura.E2E/Aura.E2E.csproj --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=e2e-tests.trx"
      
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          **/TestResults/*.trx
